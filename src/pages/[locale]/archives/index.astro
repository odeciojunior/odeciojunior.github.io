---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Card from "@/components/Card.astro";
import getPostsByGroupCondition from "@/utils/getPostsByGroupCondition";
import { SITE } from "@/config";
import { SUPPORTED_LANGUAGES, type Language } from "@/i18n/config";
import { t } from "@/i18n/utils";

export const getStaticPaths = (() => {
  return SUPPORTED_LANGUAGES.map(language => {
    const locale = language === 'en-US' ? 'en' : language === 'pt-BR' ? 'pt' : language;
    return {
      params: { locale },
      props: { locale: language }
    };
  });
}) satisfies GetStaticPaths;

const { locale } = Astro.props;
const currentLocale = locale as Language;

// Set current language in Astro.locals
Astro.locals.currentLanguage = currentLocale;

// Redirect to 404 page if `showArchives` config is false
if (!SITE.showArchives) {
  return Astro.redirect(`/${currentLocale === 'en-US' ? 'en' : currentLocale === 'pt-BR' ? 'pt' : currentLocale}/404`);
}

const posts = await getCollection("blog", ({ data }) => {
  if (data.draft) return false;
  // Filter by locale if specified
  if (data.locale) {
    return data.locale === currentLocale;
  }
  return true;
});

const months = (t(currentLocale, 'months') as unknown) as string[];
---

<Layout title={`${t(currentLocale, 'archives')} | ${SITE.title}`} lang={currentLocale}>
  <Header />
  <Main pageTitle={t(currentLocale, 'archives')} pageDesc={t(currentLocale, 'archivesDescription')}>
    {
      Object.entries(
        getPostsByGroupCondition(posts, post =>
          post.data.pubDatetime.getFullYear()
        )
      )
        .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
        .map(([year, yearGroup]) => (
          <div>
            <span class="text-2xl font-bold">{year}</span>
            <sup class="text-sm">{yearGroup.length}</sup>
            {Object.entries(
              getPostsByGroupCondition(
                yearGroup,
                post => post.data.pubDatetime.getMonth() + 1
              )
            )
              .sort(([monthA], [monthB]) => Number(monthB) - Number(monthA))
              .map(([month, monthGroup]) => (
                <div class="flex flex-col sm:flex-row">
                  <div class="mt-6 min-w-36 text-lg sm:my-6">
                    <span class="font-bold">{months[Number(month) - 1]}</span>
                    <sup class="text-xs">{monthGroup.length}</sup>
                  </div>
                  <ul>
                    {monthGroup
                      .sort(
                        (a, b) =>
                          Math.floor(
                            new Date(b.data.pubDatetime).getTime() / 1000
                          ) -
                          Math.floor(
                            new Date(a.data.pubDatetime).getTime() / 1000
                          )
                      )
                      .map(data => (
                        <Card {...data} locale={currentLocale} />
                      ))}
                  </ul>
                </div>
              ))}
          </div>
        ))
    }
  </Main>
  <Footer />
</Layout>